name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black (Code Formatting)
        run: black --check --diff src/ tests/

      - name: Run isort (Import Sorting)
        run: isort --check-only --diff src/ tests/

      - name: Run Flake8 (Style Guide)
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run Pylint (Static Analysis)
        run: pylint src/ --reports=yes --output-format=text > pylint-report.txt || true

      - name: Upload Lint Reports
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports
          path: |
            pylint-report.txt

  test:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests with Coverage
        run: |
          python -m pytest tests/ \
            --cov=src \
            --cov-report=html:htmlcov \
            --cov-report=xml:coverage.xml \
            --cov-report=term \
            --html=test-report.html \
            --self-contained-html \
            --junitxml=junit.xml

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            test-report.html
            junit.xml
            htmlcov/
            coverage.xml

      - name: Upload Coverage to Codecov (Optional)
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  health-endpoint:
    name: Health Endpoint Tests (TP Requirement)
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start Flask app in background
        run: |
          export PYTHONPATH=${{ github.workspace }}
          python src/app.py &
          APP_PID=$!
          echo "Flask app started with PID: $APP_PID"
          sleep 10  # Wait for app to start

      - name: Test health endpoint availability
        run: |
          # Test that endpoint exists and returns 200
          response=$(curl -s -w "%{http_code}" http://localhost:5000/health)
          http_code=$(echo "$response" | tail -n1)
          if [ "$http_code" != "200" ]; then
            echo "❌ Health endpoint failed with status: $http_code"
            exit 1
          fi
          echo "✅ Health endpoint returns status 200"

      - name: Test health endpoint JSON structure
        run: |
          # Test that response contains required JSON structure
          response=$(curl -s http://localhost:5000/health)
          echo "Health endpoint response: $response"
          
          # Check for required fields
          if echo "$response" | grep -q '"status":"ok"'; then
            echo "✅ Status field is correct"
          else
            echo "❌ Status field missing or incorrect"
            exit 1
          fi
          
          if echo "$response" | grep -q '"timestamp"'; then
            echo "✅ Timestamp field present"
          else
            echo "❌ Timestamp field missing"
            exit 1
          fi

      - name: Test health endpoint response time
        run: |
          # Test response time (allowing CI overhead)
          for i in {1..3}; do
            response_time=$(curl -w "%{time_total}" -s -o /dev/null http://localhost:5000/health)
            response_time_ms=$(echo "$response_time * 1000" | bc)
            echo "Response time attempt $i: ${response_time_ms}ms"
          done
          echo "✅ Health endpoint performance test completed"

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test, health-endpoint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build setuptools wheel

      - name: Create Build Directory
        run: |
          mkdir -p dist
          
      - name: Build Application
        run: |
          # Copiar archivos fuente a dist
          cp -r src/* dist/ 2>/dev/null || true
          
          # Crear un archivo de versión
          echo "Build: $(date '+%Y-%m-%d %H:%M:%S')" > dist/build-info.txt
          echo "Commit: ${{ github.sha }}" >> dist/build-info.txt
          echo "Branch: ${{ github.ref_name }}" >> dist/build-info.txt
          
          # Crear requirements para producción
          cp requirements.txt dist/
          
          # Verificar que el build fue exitoso
          ls -la dist/
          echo "Build completed successfully!"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist/

  integration:
    name: Integration Summary
    runs-on: ubuntu-latest
    needs: [lint, test, health-endpoint, build]
    if: always()
    steps:
      - name: Check Results
        run: |
          echo "Lint Status: ${{ needs.lint.result }}"
          echo "Test Status: ${{ needs.test.result }}"
          echo "Health Endpoint Status: ${{ needs.health-endpoint.result }}"
          echo "Build Status: ${{ needs.build.result }}"
          
          if [[ "${{ needs.lint.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.health-endpoint.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All CI checks passed successfully!"
            exit 0
          else
            echo "❌ Some CI checks failed"
            exit 1
          fi
