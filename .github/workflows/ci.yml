name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black (Code Formatting)
        run: black --check --diff src/ tests/

      - name: Run isort (Import Sorting)
        run: isort --check-only --diff src/ tests/

      - name: Run Flake8 (Style Guide)
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run Pylint (Static Analysis)
        run: pylint src/ --reports=yes --output-format=text > pylint-report.txt || true

      - name: Upload Lint Reports
        uses: actions/upload-artifact@v3
        with:
          name: lint-reports
          path: |
            pylint-report.txt

  test:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest-html pytest-cov

      - name: Run Unit Tests with Coverage
        run: |
          python -m pytest tests/ \
            --cov=src \
            --cov-report=html:htmlcov \
            --cov-report=xml:coverage.xml \
            --cov-report=term \
            --html=test-report.html \
            --self-contained-html \
            --junitxml=junit.xml

      - name: Upload Test Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports
          path: |
            test-report.html
            junit.xml
            htmlcov/
            coverage.xml

      - name: Upload Coverage to Codecov (Optional)
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build setuptools wheel

      - name: Create Build Directory
        run: |
          mkdir -p dist
          
      - name: Build Application
        run: |
          # Copiar archivos fuente a dist
          cp -r src/* dist/ 2>/dev/null || true
          
          # Crear un archivo de versión
          echo "Build: $(date '+%Y-%m-%d %H:%M:%S')" > dist/build-info.txt
          echo "Commit: ${{ github.sha }}" >> dist/build-info.txt
          echo "Branch: ${{ github.ref_name }}" >> dist/build-info.txt
          
          # Crear requirements para producción
          cp requirements.txt dist/
          
          # Verificar que el build fue exitoso
          ls -la dist/
          echo "Build completed successfully!"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-dist
          path: dist/

  integration:
    name: Integration Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: always()
    steps:
      - name: Check Results
        run: |
          echo "Lint Status: ${{ needs.lint.result }}"
          echo "Test Status: ${{ needs.test.result }}"
          echo "Build Status: ${{ needs.build.result }}"
          
          if [[ "${{ needs.lint.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All CI checks passed successfully!"
            exit 0
          else
            echo "❌ Some CI checks failed"
            exit 1
          fi
